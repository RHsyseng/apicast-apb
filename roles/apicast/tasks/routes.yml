---
- name: Set Management API endpoint
  set_fact:
    api: https://{{ management_host }}/admin/api

- name: Get service list
  uri:
    url: "{{ api }}/services.xml"
    user: "{{ access_token }}"
    force_basic_auth: yes
    method: GET
    return_content: yes
    validate_certs: yes
  register: services_xml

- name: Find service IDs
  xml:
    xmlstring: "{{ services_xml.content }}"
    xpath: /services/service/id
    content: text
  register: service_ids

# TODO: filter by service list param
- name: Get proxy config of services
  uri:
    url: "{{ api }}/services/{{ item.id }}/proxy.xml"
    user: "{{ access_token }}"
    force_basic_auth: yes
    method: GET
    return_content: yes
    validate_certs: yes
  with_items: "{{ service_ids.matches }}"
  register: proxy_configs

- name: Parse proxy configs to obtain public service endpoints
  xml:
    xmlstring: "{{ item.content }}"
    xpath: "{{ endpoint_xpath }}"
    content: text
  with_items: "{{ proxy_configs.results }}"
  register: service_endpoints

- name: Extract hostnames from service endpoints
  set_fact:
    host: >-
      {{ item.matches | map(attribute=endpoint_name) | join |
      regex_replace('^http[s]*://', '') |
      regex_replace(':\d+$', '')
      }}
  with_items: "{{ service_endpoints.results }}"
  register: service_hostnames

# TODO: secure routes
- name: Create routes for service hostnames
  openshift_v1_route:
    name: "{{ item }}"
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: "{{ apicast_name }}"
      service: "{{ apicast_name }}"
    spec_to_name: "{{ apicast_name }}"
    spec_port_target_port: proxy
    spec_host: "{{ item }}"
  with_items: >-
     {{ service_hostnames.results | map(attribute='ansible_facts.host') | list }}
