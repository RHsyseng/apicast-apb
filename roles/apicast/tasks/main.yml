---
- name: Encode management endpoint
  shell: echo -n "https://{{ access_token }}@{{ management_host }}" | base64 -w 0
  register: encoded_endpoint

- name: Create the secret to authenticate to the Account Management API
  k8s_v1_secret:
    name: "{{ apicast_name }}"
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    data:
      management_endpoint: "{{ encoded_endpoint.stdout }}"

# TODO create a route?
# See: https://support.3scale.net/docs/deployment-options/apicast-openshift
#      Step 3: Create routes in OpenShift console

- name: Create APICast APB deployment config
  openshift_v1_deployment_config:
    restart_policy: Always
    replicas: "{{ apicast_replicas }}"
    state: "{{ state }}"
    name: "{{ apicast_name }}"
    namespace: "{{ namespace }}"
    labels:
      app: "{{ apicast_name }}"
    spec_template_metadata_labels:
      app: "{{ apicast_name }}"
    selector:
      deploymentconfig: "{{ apicast_name }}"
    containers:
    - env:
      - name: THREESCALE_PORTAL_ENDPOINT
        valueFrom:
          secretKeyRef:
            name: "{{ apicast_name }}"
            key: management_endpoint
      # TODO: create ConfigMap with {{ config_file }} and use it to populate
      # the THREESCALE_CONFIG_FILE env var
      #- name: THREESCALE_CONFIG_FILE
      #  value: "{{ CONFIGURATION_FILE_PATH }}"
      - name: THREESCALE_DEPLOYMENT_ENV
        value: "{{ environment }}"
      - name: RESOLVER
        value: "{{ resolver }}"
      - name: APICAST_SERVICES
        value: "{{ service_list }}"
      - name: APICAST_CONFIGURATION_LOADER
        value: "{{ config_loader }}"
      - name: APICAST_BACKEND_CACHE_HANDLER
        value: "{{ backend_cache_handler }}"
      - name: APICAST_LOG_LEVEL
        value: "{{ log_level }}"
      - name: APICAST_PATH_ROUTING_ENABLED
        value: '"{{ path_routing }}"'
      - name: APICAST_RESPONSE_CODES
        value: '"{{ response_codes }}"'
      - name: APICAST_CONFIGURATION_CACHE
        value: '"{{ config_cache }}"'
      - name: REDIS_URL
        value: "{{ redis_url }}"
      - name: APICAST_OAUTH_TOKENS_TTL
        value: '"{{ oauth_tokens_ttl }}"'
      - name: APICAST_MANAGEMENT_API
        value: "{{ management_scope }}"
      - name: OPENSSL_VERIFY
        value: '"{{ tls_verify }}"'
      image: "{{ apicast_image }}"
      imagePullPolicy: Always
      name: "{{ apicast_name }}"
      livenessProbe:
        httpGet:
          path: /status/live
          port: management
        initialDelaySeconds: 10
        timeoutSeconds: 1
      readinessProbe:
        httpGet:
          path: /status/ready
          port: management
        initialDelaySeconds: 15
        timeoutSeconds: 1
      ports:
      - name: proxy
        containerPort: 8080
        protocol: TCP
      - name: management
        containerPort: 8090
        protocol: TCP

- name: Create APICast APB service
  k8s_v1_service:
    name: "{{ apicast_name }}"
    namespace: "{{ namespace }}"
    state: present
    selector:
      app: "{{ apicast_name }}"
    ports:
      - name: proxy
        containerPort: 8080
        protocol: TCP
      - name: management
        containerPort: 8090
        protocol: TCP
